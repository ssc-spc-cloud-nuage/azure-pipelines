parameters:
  - name: eslzEnvs
    type: object
  - name: checkovSkipChecks
    type: string
stages: 
- ${{ each eslzEnv in parameters.eslzEnvs }}:  
  - stage: ${{ eslzEnv.envName }}_Plan
    jobs:
      - job: InitJob
        pool: ${{ eslzEnv.pool }}
        steps:
          - checkout: none
          - bash: |
              if [[ $(Build.Reason) == "PullRequest" ]]; then
                  sourceBranch=$(echo $(System.PullRequest.SourceBranch) | sed 's|refs/heads/||')
                  echo "PullRequest build triggered from $sourceBranch"
              else
                  sourceBranch=$(Build.SourceBranchName)
                  echo "Manual build triggered from $sourceBranch"
              fi
              defaultBranch=$(curl -s -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" -H "Content-Type: application/json" "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.ID)?api-version=7.1-preview.1" | jq -r .defaultBranch | sed 's|refs/heads/||')
              changedFiles=$(curl -s -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" -H "Content-Type: application/json" "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.ID)/diffs/commits?baseVersion=$defaultBranch&targetVersion=$sourceBranch&api-version=7.1-preview.1" | jq '.changes[].item.path')
              echo "$LAYERS_JSON" | jq -r '.[]' | while read -r layername; do
                  foldertocheck="${{ eslzEnv.envName }}/$layername/"
                  if [[ "$changedFiles" =~ $foldertocheck ]]; then
                      echo "Changes detected in the folder : (${{ eslzEnv.envName }}/$layername/)."
                      echo "##vso[task.setvariable variable=RepoChange$layername;isOutput=true]true"
                  else
                      echo "No changes detected in the folder : (${{ eslzEnv.envName }}/$layername/)."
                      echo "##vso[task.setvariable variable=RepoChange$layername;isOutput=true]false"
                  fi
              done
            name: GitDiffTask
            failOnStderr: True
            env:
              LAYERS_JSON: ${{ convertToJson(eslzEnv.layers) }}
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          - bash: |
              if [ ! -d "$(Agent.ToolsDirectory)/.tfenv" ]; then
              git clone --depth=1 https://github.com/ssc-spc-cloud-nuage/tfenv.git $(Agent.ToolsDirectory)/.tfenv
              echo 'export PATH=$(Agent.ToolsDirectory)/.tfenv/bin:$PATH' >> ~/.profile
              $(Agent.ToolsDirectory)/.tfenv/bin/tfenv install 1.5.5
              $(Agent.ToolsDirectory)/.tfenv/bin/tfenv use 1.5.5
              fi

              if [ ! -d "$(Agent.ToolsDirectory)/.tgenv" ]; then
              git clone --depth=1 https://github.com/ssc-spc-cloud-nuage/tgenv.git $(Agent.ToolsDirectory)/.tgenv
              echo 'export PATH=$(Agent.ToolsDirectory)/.tgenv/bin:$PATH' >> ~/.profile
              $(Agent.ToolsDirectory)/.tgenv/bin/tgenv install latest
              $(Agent.ToolsDirectory)/.tgenv/bin/tgenv use latest
              fi

              echo "##vso[task.setvariable variable=JobAgentName;isOutput=true]$(Agent.Name)"
            
            displayName: 'install terraform/terragrunt'
            name: TFTGInstall

          - bash: |
              if [ ! -f $HOME/.local/bin/checkov ]; then
                sudo apt install python3-pip -y
                pip3 install checkov
                echo 'export PATH=$HOME/.local/bin:$PATH' >> ~/.profile
              fi
            
            displayName: 'Install Checkov'


      - template: /terragrunt-multi-envs/templates/job-terragruntplan-template.yaml@templates
        parameters:
          serviceConnection: ${{ eslzEnv.serviceConnection }}
          eslzEnvFolder: ${{ eslzEnv.envName }}
          layers: ${{ eslzEnv.layers }}
          checkovSkipChecks: ${{ parameters.checkovSkipChecks }}
          eslzEnvPool: ${{ eslzEnv.pool }}

      - job: PostPlanJob
        dependsOn:
        - InitJob
        - ${{ each layer in eslzEnv.layers }}:
          - TerragruntPlan_${{ eslzEnv.envName }}_${{ layer }}
        condition: always()
        variables:
          AgentName: $[ dependencies.InitJob.outputs['TFTGInstall.JobAgentName'] ]
        pool: 
          name: ${{ eslzEnv.pool }}
          demands: Agent.Name -equals $(AgentName)
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@1
            name: DownloadPlan
            inputs:
              buildType: current
              downloadType: specific
              downloadPath: '$(Agent.TempDirectory)'
          - bash: |
              # echo "##vso[task.setvariable variable=PlanChange;isOutput=true]false"
              echo "$LAYERS_JSON" | jq -r '.[]' | while read -r layername; do
                if [[ -f $(Agent.TempDirectory)/plan_${{ eslzEnv.envName }}_$layername/plan_$layername.txt ]]; then
                  planvar=$(cat $(Agent.TempDirectory)/plan_${{ eslzEnv.envName }}_$layername/plan_$layername.txt)

                  if [[ "$planvar" =~ "No changes. Your infrastructure matches the configuration." ]]; then
                        echo "No Changes in plan detected in $layername)."
                        # echo "##vso[task.setvariable variable=PlanChange;isOutput=true]false"
                  else
                        echo "Changes in plan detected in $layername)."
                        echo "##vso[task.setvariable variable=PlanChange;isOutput=true]true"
                    fi
                fi
              done
            name: CheckPlanChangeTask
            failOnStderr: True
            env:
              LAYERS_JSON: ${{ convertToJson(eslzEnv.layers) }}
              
  - stage: ${{ eslzEnv.envName }}_Apply
    # pool: ${{ eslzEnv.pool }}
    variables:
      AgentName: $[ dependencies.InitJob.outputs['TFTGInstall.JobAgentName'] ]
    pool: 
      name: ${{ eslzEnv.pool }}
      # demands: Agent.Name -equals $(AgentName)
    dependsOn: ${{ eslzEnv.envName }}_Plan
    condition: and(succeeded(), eq(dependencies.${{ eslzEnv.envName }}_Plan.outputs['PostPlanJob.CheckPlanChangeTask.PlanChange'], 'true'))
    jobs:
      - template: /terragrunt-multi-envs/templates/job-terragruntapply-template.yaml@templates
        parameters:
          serviceConnection: ${{ eslzEnv.serviceConnection }}
          eslzEnvFolder: ${{ eslzEnv.envName }}
          layers: ${{ eslzEnv.layers }}
          eslzEnvPool: ${{ eslzEnv.pool }}